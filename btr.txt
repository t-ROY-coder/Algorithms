//btree
#include<iostream>
using namespace std;
# define m 5
struct bnode
{
int keytally;
int key[m-1];
bnode *pointer[m];
 bnode()
 {
 keytally=0;
 for(int i=0;i<m;i++)
	 pointer[i]=NULL;
		 }
};
class btree
{
	public:
	 struct bnode *root;
	 int s;
	 btree();
	 struct bnode* findnode(int x);
	 struct bnode* findparent(struct bnode *p);
	 void insert(int k);
	 int findpos(struct bnode *p,int k);
	 void split(bnode *(&node),bnode *(&node1),int &);
	 int sort(int a[],int k);
	 void print();
	 void sprint(struct bnode *root);
	 int search(int x);
	 struct bnode* nodesearch(int x);
	 void del(int x);
	 void pdel(bnode *(&node),int &k);
	 void merge(bnode *(&parent),int &pos);
	 void slprint(bnode *);
};
btree::btree()
{
	  root=NULL;
	  s=0;
}
void btree::slprint(bnode *root)
{
	 if(root!=NULL)
	 {
	  cout<<endl;
for(int i=0;i<root->keytally;i++)
cout<<root->key[i]<<" ";
for(int j=0;j<=root->keytally;j++)
slprint(root->pointer[j]);
}
}
void btree::merge(bnode *(&parent),int &pos)
{
cout<<"\nmerge function called.\n";
cout<<"pos="<<pos<<"  keytally="<<parent->keytally<<endl;
	  if(parent==root)
	  {
	if(parent->keytally==1)
	{cout<<"GRAND GRAND SUCCESS";
	  bnode *newnode;
	  newnode=new bnode;
	  int j=0,i;
	  for(i=0;i<(parent->pointer[0]->keytally);i++)
	  {
	 newnode->key[j++]=parent->pointer[0]->key[i];(newnode->keytally)++;
	 newnode->pointer[j-1]=parent->pointer[0]->pointer[i];
	  }
	  newnode->pointer[j]=parent->pointer[0]->pointer[parent->pointer[0]->keytally];
	  newnode->key[j++]=parent->key[0];(newnode->keytally)++;
	  bnode *node3;
	  node3=parent->pointer[1];
	  for(i=0;i<node3->keytally;i++)
	  {
	 newnode->key[j++]=node3->key[i];(newnode->keytally)++;
	 newnode->pointer[j-1]=node3->pointer[i];
	  }
	  newnode->pointer[j]=node3->pointer[node3->keytally];
	  root=newnode;
	  return ;
	}
	}
	if(pos<(parent->keytally-1)||(pos==0))
	{     cout<<"pos="<<pos<<"merge\n";
	int i;
	 bnode *newnode,*node,*node1;
	  newnode=new bnode;
	  node=parent->pointer[pos];
	  node1=parent->pointer[pos+1];
	 int j=0;
	  for(i=0;i<node->keytally;i++)
	  {
	 newnode->key[j++]=node->key[i];(newnode->keytally)++;
	 newnode->pointer[j-1]=node->pointer[i];
	  }
	  newnode->pointer[j]=node->pointer[node->keytally];
	  newnode->key[j++]=parent->key[pos];(newnode->keytally)++;
	  cout<<"\nvalue="<<newnode->key[j-1]<<endl;
	  for(i=0;i<node1->keytally;i++)
	  {
	 newnode->key[j++]=node1->key[i];(newnode->keytally)++;
	 newnode->pointer[j-1]=node1->pointer[i];
	}          cout<<"\nthese are the values:\n";
	 for(i=0;i<newnode->keytally;i++)
		  cout<<newnode->key[i]<<" ";
	  cout<<endl;
	  newnode->pointer[m-1]=node1->pointer[node1->keytally];
	  parent->pointer[pos]=newnode;
	  for(i=pos;i<parent->keytally-1;i++)
	  {
	 parent->key[i]=parent->key[i+1];
	 parent->pointer[i+1]=parent->pointer[i+2];
	  }
	  parent->pointer[(parent->keytally)-1]=parent->pointer[parent->keytally];
	 (parent->keytally)--;
	  bnode *node2;
	  node2=parent;
	  parent=findparent(node2);
	  if(parent!=NULL)
	  {
	pos=findpos(parent,node2->key[0]);
	if((parent->keytally)<(m/2))
	{
	 merge(parent,pos);
	}
	else
	return;
	}
	else
	{
	  root=node2;
	  return;
	 }
	 }
	 else if(pos==parent->keytally)
	 {
	 bnode *newnode,*node,*node1;
	 newnode=new bnode;
	 node=parent->pointer[pos];
	 node1=parent->pointer[pos-1];
	 int j=0,i;
	 for(i=0;i<node1->keytally;i++)
	 {
	 newnode->key[j++]=node1->key[i];(newnode->keytally)++;
	newnode->pointer[j-1]=node1->pointer[i];
	  }
	  newnode->pointer[j]=node1->pointer[node1->keytally];
	 newnode->key[j++]=parent->key[pos-1];(newnode->keytally)++;
	  for(i=0;i<node->keytally;i++)
	 {
	newnode->key[j++]=node->key[i];(newnode->keytally)++;
	newnode->pointer[j-1]=node->pointer[i];
	 }
	  newnode->pointer[parent->keytally-1]=node->pointer[node->keytally];
	  //newnode->keytally=parent->keytally-1;
	 parent->pointer[pos-1]=newnode;
	 parent->pointer[parent->keytally]=NULL;
	  (parent->keytally)--;
	  return;
	 }
}
bnode* btree::nodesearch(int k)
{
 struct bnode *p;
 p=root;
 while(p!=NULL)
 {
int i=0;
while((p->key[i]<k)&&(i<p->keytally))
{
 i++;
}
if((i<p->keytally)&&(p->key[i]==k))
{
	return p;
}
p=p->pointer[i];
}
return 0;
}


void btree::print()
{
 sprint(root);
}
void btree::sprint(bnode *root)
{
 if(root!=NULL)
 {
  for(int i=0;i<(root->keytally);i++)
  {
 sprint(root->pointer[i]);
 cout<<root->key[i]<<"  ";
  }
  sprint(root->pointer[(root->keytally)]);
  }
  /*else if(root->keytally==0)
  {
  cout<<"\nNo elements to display.";
  root=NULL;
  }*/
}
int btree::sort(int a[],int k)
{
  int i=0;
  if(k>a[m-2])
  {
   return (m-1);
  }
   else
   {
    while((k>a[i])&&(i<(m-2)))
    {
      i++;
     }
        return (i);
        }
    
}
int btree::search(int k)
{
    struct bnode *p;
    p=root;
    while(p!=NULL)
    {
      int i=0;
       while((p->key[i]<k)&&(i<p->keytally))
      {
       i++;
       }
       if((i<p->keytally)&&(p->key[i]==k))
       {
              return 1;
       }
        p=p->pointer[i];
   }
return 0;
}
    
    
void btree::split(bnode *(&node),bnode *(&v),int &k)
{
     int a[m],i;
     bnode *b[m+1],*node2;
     node2=new bnode;
     for(i=0;i<(m-1);i++)
	  {
             a[i]=node->key[i];
             b[i]=node->pointer[i];
     }
     b[m-1]=node->pointer[m-1];
     int j=sort(a,k);
                 for(int l=m-1;l>j;l--)
                {
                        a[l]=a[l-1];
                        b[l+1]=b[l];
                }
                a[j]=k;
                b[j+1]=v;
                
     for(i=0;i<=m/2;i++)
     {
                        node->key[i]=a[i];
                        node->pointer[i]=b[i];
     }
    
	  for(i=(m/2)+1;i<m;i++)
     {
                           node2->key[i-(m/2)-1]=a[i];
                           node2->pointer[i-(m/2)-1]=b[i];
     }
     node2->pointer[i-(m/2)-1]=b[i];
     node->keytally=m/2;
     for(int y=node->keytally+1;y<m;y++)
     {
             node->pointer[y]=NULL;
             node2->pointer[y]=NULL;
     }
     node2->keytally=m/2;
     k=a[m/2];
     v=node2;
     bnode *parent=findparent(node);
     if(parent==NULL)
     {
                     parent=new bnode;
                     parent->key[0]=k;
							parent->pointer[0]=node;
                     parent->pointer[1]=v;
                     parent->keytally=1;
                     root=parent;
     }
     else if(parent->keytally<(m-1))
     {
          i=findpos(parent,k);
                for(int j=parent->keytally;j>i;j--)
                {
                        parent->key[j]=parent->key[j-1];
                        parent->pointer[j+1]=parent->pointer[j];
                }
                
                parent->key[i]=k;                
                parent->pointer[i+1]=v;
                (parent->keytally)++;
      }       
      else if(parent->keytally==m-1)
      {
			  split(parent,v,k);
      }
}                        
                              
   
int btree::findpos(struct bnode *p,int k)
{
    int i=0;
    while((p->key[i]<k)&&(i<p->keytally))
    {
                                           i++;
    }
    return i;
}
struct bnode* btree::findnode(int x)
{
       struct bnode *p,*q;
       p=root;
       int flag=0;
       if(p==NULL)
		 {
                  return root;
       }
       for(int i=0;i<m;i++)
       {
               if(p->pointer[i]!=NULL)
               {
                                      flag=1;
               }
       }
       if(flag==0)
       return root;
       while(p!=NULL)
       {
                     q=p;
                         int j=0;
                         while((p->key[j]<x)&&(j<p->keytally))
                         j++;
        p=p->pointer[j];
        }
		  return q;
}
struct bnode* btree::findparent(struct bnode *p)
{
       struct bnode *r,*q;
       q=root;
       r=root;
       int y=p->key[0];
       if(p==root)
       return NULL;
       while(q!=p)
       {
                  r=q;
                  int j=0;
                  while((q->key[j]<y)&&(j<q->keytally))
                  j++;
       q=q->pointer[j];
		 }
		 return r;
}
void btree::insert(int k)
{
	  struct bnode *node,*node2;
	  node=findnode(k);
	  node2=NULL;
	  if(node==NULL)
	  {
						 root=new bnode;
						 root->key[0]=k;
						 (root->keytally)++;
						 return;
	  }
		int i=findpos(node,k);
		if(node->keytally<(m-1))
		{
					 for(int j=node->keytally;j>i;j--)
					 {
								node->key[j]=node->key[j-1];
					 }
					 node->key[i]=k;
					 (node->keytally)++;
		}
		else if(node->keytally==m-1)
		{
			  split(node,node2,k);
		}
}
void btree::del(int k)
{
	  if(search(k))
	  {
						struct bnode *node;
						node=nodesearch(k);
						pdel(node,k);
	  }
	  else
	  {
			cout<<"\nno such element found....\n";
	  }
}
void   btree::pdel(bnode *(&node),int &k)
{
		 int flag=0,i;
		 for(i=0;i<node->keytally;i++)
		 {
		if(node->pointer[i]!=NULL)
			flag=1;
		 }
		 if(node->pointer[node->keytally]!=NULL)
		 flag=1;
		 if(flag==0)
		 {
						i=findpos(node,k);
						
					for(int j=i;j<(node->keytally-1);j++)
					{
							  node->key[j]=node->key[j+1];
					}
					node->keytally=node->keytally-1;
					if(node==root)
					return;
					if((node->keytally)>=(m/2))
					{
					return;
					}
					else
					{
					 struct bnode *parent=findparent(node);
					 int pos=findpos(parent,node->key[0]);
					 int f=0;
					 if(pos<(parent->keytally))
					 {
					 if(parent->pointer[pos+1]->keytally>(m/2))
					 {
					 node->key[node->keytally]=parent->key[pos];
					 (node->keytally)++;
					 parent->key[pos]=parent->pointer[pos+1]->key[0];
					 struct bnode *node2;
					 node2=parent->pointer[pos+1];
					 for(int i=0;i<(node2->keytally-1);i++)
					 {
					  node2->key[i]=node2->key[i+1];
					 }
				  (node2->keytally)--;
				  return;
			 }
			 }
		 if(pos>0)
	 {
	if(parent->pointer[pos-1]->keytally>(m/2))
	{
	for(int i=node->keytally;i>0;i--)
	{
	node->key[i]=node->key[i-1];
	 }
	 node->key[0]=parent->key[pos-1];
	 (node->keytally)++;
	struct bnode *q=parent->pointer[pos-1];
	parent->key[pos-1]=q->key[q->keytally-1];
	(q->keytally)--;
	 return;
	}
	}
	merge(parent,pos);
	 return;
	}
	}
	else if(flag==1)
	 {
         bnode *r,*s;
         int i=findpos(node,k);
          r=node->pointer[i+1];;
          while(r!=NULL)
          {
                        s=r;
                        r=r->pointer[0];    
          }
		 node->key[i]=s->key[0];
		 pdel(s,s->key[0]);
		 }
      }

int main()
{
	  btree b;
	  int x;
	  int a[10];
	  for(int j=0;j<10;j++)
	  a[j]=j+1;
	  for(int i=0;i<10;i++)
		{
				  cin>>x;
				  b.insert(x);
				  }
				  b.print();
				  
				  for(int k=0;k<10;k++)
				  {
				  cout<<"\nenter the element to be deleted:";
				  cin>>x;
				  b.del(x);
              b.print();
				  }
              
              cin>>x;
              return 0;                              
}
